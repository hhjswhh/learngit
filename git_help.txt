git 命令
git config --global user.name "Your Name"  设置用户名
git config --global user.email "email@example.com"  设置邮箱
git init  将此目录设为版本仓库
git add  将文件添加到仓库
git commit  将文件提交到仓库 -m ""用于说明修改内容
git status  查看仓库当前状态
git diff  查看修改内容
git log  查看过去提交的历史 含-m的说明
git reset 恢复到历史版本 git reset --hard HEAD^ （一个^表示前1个版本，^^表示前2个版本，HEAD~100表示前100个版本）
git reset --hard 2fe25d8  HEAD还可替换为commit号前几位
git reflog  查看命令历史，记录了每一次命令的操作号，在关闭窗口后再打开可通过此处查找commit号

git中有工作区(Working Dictionary)与版本库(Repository)
版本库里有 暂存区 和 第一个分支
git add 将文件修改添加到暂存区
git commit 将暂存区的所有文件提交到当前分支

git checkout -- <File>  撤销修改，返回到add或commit的状态，-- 很重要，没有--表示的是切换分支
git reset HEAD <File>  把add的文件回退到工作区，之后可以再checkout一下撤销修改

rm test.txt  在命令行删除了文件后 git status 知道你删除了，可以用
git rm test.txt + git commit -m "remove test.txt"  来确认删除操作，也可以
git checkout -- test.txt  来将误删的文件恢复，checkout操作相当于用版本库替换工作区的版本

要关联一个远程库git remote add origin git@github.com:用户名/库名.git
关联后，使用命令git push -u origin master第一次推送master分支的所有内容
git push origin master 将本地master分支的最新修改推送至Github
git clone git@github.com:michaelliao/gitskills.git  从远程库克隆到本地

git checkout -b dev  创建并切换到分支dev -b表示创建并切换相当于(git branch dev   git checkout dev)
git branch  查看所有分支，*表示当前分支
切换分支后当前分支的操作不影响其他分支，其他分支文件依然如原来那样
git merge dev  将dev分支合并到当前分支
git branch -d dev  删除dev分支
在分支都被修改并提交后出现合并错误的时候，手工修改，git在文件中用标记给出了修改的部分，可以手工修改然后提交，
git log --graph  可以看到分支合并图
合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并

git stash  保存当前分支，适用于暂时离开当前分支并且不提交需要去临时处理其他任务（如修改bug）
git stash list  查看保存空间
git stash apply  恢复stash内容但不删除
git stash pop  恢复保存内容并删除该stash空间
git stash apply stash@{0}  恢复指定的stash

友好提示  开发一个新功能最好新建一个分支
如果要丢弃一个木有合并的分支，可以通过git branch -D <name>强行删除

git remote  查看远程库的信息  -v 显示详细信息

多人协作的工作模式通常是这样：
首先，可以试图用git push origin branch-name推送自己的修改；
如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
如果合并有冲突，则解决冲突，并在本地提交；
没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！
如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，
用命令git branch --set-upstream branch-name origin/branch-name。
这就是多人协作的工作模式，一旦熟悉了，就非常简单。

git tag v1.0  给当前分支打标签
git tag  查看所有标签
git tag v0.9 6224937  对某一特定commit打标签，即可对过去打标签
git show v0.9  查看标签详细信息
git tag -a v0.1  -m "version 0.1 released" 3628164  -a表示标签名 -m表示说明
git tag -d v0.1  删除标签
git push origin v1.0  标签推送到远程，默认不自动推送到远程
git push origin --tags  一次推送全部尚未推送到远程的本地标签
git push origin :refs/tags/v0.9

在GitHub上，可以任意Fork开源仓库；
自己拥有Fork后的仓库的读写权限；
可以推送pull request给官方仓库来贡献代码。

在Git工作区的根目录下创建一个特殊的.gitignore文件，能忽略特殊文件
git config --global alias.st status  给命令配置别名